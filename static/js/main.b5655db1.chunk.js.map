{"version":3,"sources":["bll/counterReducer.ts","components/Button/Button.tsx","utils/localstorage-utils.ts","components/MainScreen/MainScreen.tsx","components/InputComponent/InputComponent.tsx","components/Settings/Settings.tsx","App.tsx","reportWebVitals.ts","bll/store.ts","index.tsx"],"names":["ACTIONS_TYPE","Button","callBack","disabled","name","onClick","className","loadState","serializedState","localStorage","getItem","JSON","parse","err","stateForLS","startValue","maxValue","initialState","counter","viewMode","setValueFromLS","value","type","SET_VALUE_FROM_LS","setMaxValue","SET_MAX_VALUE","setStartValue","SET_START_VALUE","setViewMode","SET_VIEWMODE","MainScreen","checkOptions","dispatch","useDispatch","counterState","useSelector","state","counterClassName","INCREMENT","DECREMENT","InputComponent","getNewValue","initialValue","inputClassName","onChange","e","currentTarget","Settings","newMaxValue","isFinite","newStartValue","App","isNaN","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b5655db1.chunk.js","sourcesContent":["import { loadState } from \"../utils/localstorage-utils\"\r\n\r\nexport enum ACTIONS_TYPE {\r\n    INCREMENT = 'INCREMENT',\r\n    DECREMENT = 'DECREMENT',\r\n    SET_VALUE_FROM_LS = 'SET-VALUE-FROM-LS',\r\n    SET_MAX_VALUE = 'SET-MAX-VALUE',\r\n    SET_START_VALUE = 'SET-START-VALUE',\r\n    SET_VIEWMODE = 'SET-VIEWMODE'\r\n\r\n}\r\n\r\nconst stateForLS = {\r\n    startValue: loadState().startValue,\r\n    maxValue: loadState().maxValue,\r\n}\r\n\r\nconst initialState = {\r\n    startValue: stateForLS.startValue,\r\n    maxValue: stateForLS.maxValue,\r\n    counter: 1,\r\n    viewMode: false\r\n}\r\n\r\nexport type StateForLSType = typeof stateForLS\r\nexport type InitialStateType = typeof initialState\r\n\r\ntype ActionType = IncrementCounterActionType \r\n                | DecrementCounterActionType\r\n                | SetValueFromLSActionType\r\n                | SetMaxValueActionType\r\n                | SetStartValueActionType\r\n                | SetViewModeActionType\r\n\r\nexport const counterReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n    switch(action.type) {\r\n        case ACTIONS_TYPE.INCREMENT:\r\n            return { ...state,\r\n                    counter: +state.counter + 1}\r\n        case ACTIONS_TYPE.DECREMENT:\r\n            return { ...state,\r\n                    counter: +state.counter - 1}\r\n        case ACTIONS_TYPE.SET_VALUE_FROM_LS:\r\n            return { ...state,\r\n                    counter: +action.value}\r\n        case ACTIONS_TYPE.SET_MAX_VALUE:\r\n            return { ...state,\r\n                    maxValue : action.value\r\n                     }\r\n        case ACTIONS_TYPE.SET_START_VALUE:\r\n            return { ...state,\r\n                    startValue: action.value\r\n                     }\r\n        case ACTIONS_TYPE.SET_VIEWMODE:\r\n            return {...state,\r\n                    viewMode: !action.viewMode}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const incrementCounter = () => ({type: ACTIONS_TYPE.INCREMENT} as const)\r\nexport type IncrementCounterActionType = ReturnType<typeof incrementCounter>\r\n\r\nexport const decrementCounter = () => ({type: ACTIONS_TYPE.DECREMENT} as const)\r\nexport type DecrementCounterActionType = ReturnType<typeof decrementCounter>\r\n\r\nexport const setValueFromLS = (value: number) => ({type: ACTIONS_TYPE.SET_VALUE_FROM_LS, value} as const)\r\nexport type SetValueFromLSActionType = ReturnType<typeof setValueFromLS>\r\n\r\nexport const setMaxValue = (value: number) => ({type: ACTIONS_TYPE.SET_MAX_VALUE, value} as const)\r\nexport type SetMaxValueActionType = ReturnType<typeof setMaxValue>\r\n\r\nexport const setStartValue = (value: number) => ({type: ACTIONS_TYPE.SET_START_VALUE, value} as const)\r\nexport type SetStartValueActionType = ReturnType<typeof setStartValue>\r\n\r\nexport const setViewMode = (viewMode: boolean) => ({type: ACTIONS_TYPE.SET_VIEWMODE, viewMode} as const)\r\nexport type SetViewModeActionType = ReturnType<typeof setViewMode>","import React, { FC } from 'react';\r\nimport './Button.css'\r\n\r\ntype ButtonPropsType = {\r\n    name: string\r\n    callBack?: () => void\r\n    disabled: boolean\r\n}\r\n\r\nconst Button: FC<ButtonPropsType> = ({ callBack, disabled, name }) => {\r\n\r\n    let overallCallback = () => {\r\n        callBack && callBack()\r\n        \r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={overallCallback}\r\n                disabled={disabled}\r\n                className='button'>\r\n                {name}\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Button","import { StateForLSType } from \"../bll/counterReducer\";\r\nexport const loadState = () => {\r\n  try {\r\n    const serializedState = localStorage.getItem('state');\r\n    if (serializedState === null) {\r\n      return {'startValue': 0, 'maxValue': 5};\r\n    }\r\n    return JSON.parse(serializedState);\r\n  } catch (err) {\r\n    return undefined;\r\n  }\r\n}; \r\n\r\n\r\nexport const saveState = (state: StateForLSType) => {\r\n    try {\r\n      const serializedState = JSON.stringify(state);\r\n      localStorage.setItem('state', serializedState);\r\n    } catch {\r\n      // ignore write errors\r\n    }\r\n  };\r\n","import React, { FC } from 'react';\r\nimport './MainScreen.css'\r\nimport Button from '../Button/Button';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { decrementCounter, incrementCounter, InitialStateType, setValueFromLS, setViewMode } from '../../bll/counterReducer';\r\nimport { IGlobalState } from '../../bll/store';\r\n\r\ntype MainScreenType = {\r\n    checkOptions: boolean\r\n}\r\n\r\nconst MainScreen: FC<MainScreenType> = ( { checkOptions,} ) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const counterState = useSelector<IGlobalState, InitialStateType>(state => state.counter)\r\n\r\n    const incCounter = () => {\r\n        if (counterState.counter === counterState.maxValue) return\r\n        dispatch(incrementCounter())\r\n    }\r\n\r\n    const decCounter = () => {\r\n        if (counterState.counter === counterState.startValue) return\r\n        dispatch(decrementCounter())\r\n    }\r\n\r\n    const resetCounter = () => dispatch(setValueFromLS(counterState.startValue))\r\n\r\n    const viewModeHandler = () => {\r\n        dispatch(setViewMode(true))\r\n    }\r\n\r\n    const counterClassName = counterState.counter === counterState.maxValue ? 'counter_end' : 'counter'\r\n\r\n    return (\r\n        <div className='screen_wrapper'>\r\n\r\n        <div className='main_screen'>\r\n            <div className={counterClassName}>\r\n                {checkOptions ? 'Incorrect value!' : counterState.counter}\r\n            </div>\r\n            <div className='buttons'>\r\n                <Button name={'inc'}\r\n                    callBack={incCounter}\r\n                    disabled={counterState.counter === counterState.maxValue} />\r\n                <Button name={'dec'}\r\n                    callBack={decCounter}\r\n                    disabled={counterState.counter === counterState.startValue} />\r\n                <Button name={'reset'}\r\n                    callBack={resetCounter}\r\n                    disabled={counterState.counter === counterState.startValue} />\r\n                <Button name={'settings'}\r\n                    callBack={viewModeHandler}\r\n                    disabled={checkOptions}/>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainScreen","import React, { ChangeEvent, FC } from 'react';\r\nimport './InputComponent.css'\r\n\r\ntype InputComponentType = {\r\n    getNewValue: (newValue: any) => void\r\n    initialValue: number\r\n    checkOptions: boolean\r\n}\r\n\r\nconst InputComponent: FC<InputComponentType> = ( { getNewValue, initialValue, checkOptions } ) => {\r\n\r\n    let onInputChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        getNewValue(e.currentTarget.value)\r\n           \r\n    }\r\n\r\n    const inputClassName = checkOptions ? 'bad_value_style' : 'good_value_style'\r\n\r\n    return (\r\n        <div className='input'>\r\n            <input className={inputClassName} value={initialValue} onChange={onInputChangeHandler}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InputComponent","import React, { FC } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { InitialStateType, setMaxValue, setStartValue, setValueFromLS, setViewMode } from '../../bll/counterReducer';\r\nimport { IGlobalState } from '../../bll/store';\r\nimport Button from '../Button/Button';\r\nimport InputComponent from '../InputComponent/InputComponent';\r\nimport './Settings.css';\r\n\r\ntype SettingsType = {\r\n    checkOptions: boolean\r\n\r\n}\r\n\r\nconst Settings: FC<SettingsType> = ({ checkOptions}) => {\r\n    const counterState = useSelector<IGlobalState, InitialStateType>(state => state.counter)\r\n    const dispatch = useDispatch()\r\n\r\n    const getNewStartValue = (newStartValue: any) => {\r\n        if (!isFinite(+newStartValue)) return\r\n        dispatch(setStartValue(+newStartValue))\r\n    }\r\n\r\n    const getNewMaxValue = (newMaxValue: any) => {\r\n        if (!isFinite(+newMaxValue)) return\r\n        dispatch(setMaxValue(+newMaxValue))\r\n    }\r\n\r\n    const setRecentValue = () => {\r\n        dispatch(setStartValue(counterState.startValue))\r\n        dispatch(setMaxValue(counterState.maxValue))\r\n        dispatch(setValueFromLS(counterState.startValue))\r\n        dispatch(setViewMode(false))\r\n    }    \r\n\r\n    return (\r\n        <div className='settings_wrapper'>\r\n            <div className='settings'>\r\n                <div className='input_container'>\r\n                    <InputComponent getNewValue={getNewMaxValue}\r\n                        initialValue={+counterState.maxValue}\r\n                        checkOptions={checkOptions} \r\n                        />\r\n                    <label>Max Value</label>\r\n                </div>\r\n                <div className='input_container'>\r\n                    <InputComponent getNewValue={getNewStartValue}\r\n                        initialValue={+counterState.startValue}\r\n                        checkOptions={checkOptions} \r\n                        />\r\n                    <label>Start Value</label>\r\n                </div>\r\n                <div>\r\n                    <Button name='set'\r\n                        callBack={setRecentValue}\r\n                        disabled={checkOptions}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport './App.css';\nimport { InitialStateType, setMaxValue, setStartValue, setValueFromLS, setViewMode } from './bll/counterReducer';\nimport { IGlobalState } from './bll/store';\nimport MainScreen from './components/MainScreen/MainScreen';\nimport Settings from './components/Settings/Settings';\n\nfunction App() {\n\n  const counterState = useSelector<IGlobalState, InitialStateType>(state => state.counter)\n\n  const checkOptions = isNaN(counterState.startValue) || isNaN(counterState.maxValue)\n                                ? true\n                                : counterState.startValue === counterState.maxValue\n                                ? true\n                                : counterState.startValue > counterState.maxValue\n                                ? true\n                                : counterState.startValue < 0 || counterState.maxValue < 0\n                                ? true\n                                : false\n\n  return (\n    \n    <div className='App'>\n      { counterState.viewMode \n        ? <MainScreen checkOptions={checkOptions}/>\n        : <Settings checkOptions={checkOptions}/>\n      }\n    </div>\n    \n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { saveState } from './../utils/localstorage-utils';\r\nimport { combineReducers, createStore } from 'redux';\r\nimport { loadState } from '../utils/localstorage-utils';\r\nimport { counterReducer } from './counterReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    counter: counterReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer,  loadState())\r\n\r\nstore.subscribe(() => {\r\n    saveState({\r\n        startValue: store.getState().counter.startValue,\r\n        maxValue: store.getState().counter.maxValue\r\n    })\r\n})\r\n\r\nexport type IGlobalState = ReturnType<typeof rootReducer>\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './bll/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}